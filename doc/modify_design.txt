Order----(from early to late)
    ConstVarRemover
    BasicBlockSplitter


BasicBlockSplitter----
    For each tuple:
        If tuple is <label tuple> or <func tuple> 
            if current basic block has not started, add tuple and label to block's labels.
            otherwise, end current block, start a new basic block, add tuple and label to the new block's labels.
                And add normal edge between the old block and the new block.
            if the tuple is <func tuple>, mark the current block(after above processing) as <entrance block>.

        If tuple is <jump tuple>, <branch tuple> or <call tuple>
            add the tuple to current block.
            Then end current block, start a new basic block.
            if the tuple is <branch tuple> or <call tuple>
                Add normal edge between the old block and the new block.

        If tuple is <return tuple>,
            add the tuple to current block.
            Then end current block, start a new block.
            Mark the old block as <exit block>.
        
        For other tuples,
            add the tuple to current block.

    <label tuple>: LABEL
    <func tuple>: FUNC
    <jump tuple>: JMP
    <branch tuple>: BEQ, BEZ
    <call tuple>: CALL // consider this, whether we need add edge for such tuple
    <return tuple>: RET




DAG----
    Builder----
        ASSIGN
            search for left's node, if not exist, create a left's node. [this step will be omitted below.]
            add res to left's Node's vars
            if exists, do nothing.

        NEG
            check if there is a left's father with NEG op.
            If not exist, create OpNode with NEG op, set node.left = left [this step will be omitted below.]
            Then add res to node's vars
            delegate is `res`[means when search `res`, can find this Node]
            left: `left`

        RARRAY, ADD, SUB, MUL, DIV, LESS, LESSOREQUAL, MORE, MOREOREQUAL, NOTEQUAL, EQUAL
            delegate is `res`
            left: `left`
            right: `right`

        WARRAY
            delegate is `res`
            left: `left`
            mid: `res`
            right: `right`

        PARAM
            delegate is `STACK` and `PARAM`
            left: `left`
            mid: `res`
            right: `right`
            spe_1: `STACK`
            spe_2: `PARAM`

        INPUT
            delegate is `IN` and `res`
            spe_1: `IN`

        OUTPUT
            delegate is `OUT` and `PARAM`
            left: `left`[optional]
            right: `right`[optional]
            spe_1: `OUT`
            spe_2: `PARAM`

        LABEL, FUNC, CALL, RET, BEZ, BEQ, JMP
            should not have