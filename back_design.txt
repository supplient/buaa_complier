
Stack----
    High
     |    
     |    <caller function's stack>
     |    
     |    param  x
     |    param ...
     |    param  1
     |    param  0
     |    
     |    <$sp when enter function>
     |    
     |    local  x
     |    local ...
     |    local  1          <Note: local and temp can be mixed.>
     |    local  0
     |    
     |    temp   x
     |    temp  ...
     |    temp   1
     |    temp   0
     |    
     |    $ra
     |    
     |    $s0
     |    $s1
     |    $s...
     |    $sx
     |    
     |    <$sp before starting function exectuing>
     |    
     â†“    
    Low

Load logic----

    * since we can only calculate values in reg, 
        it's necessary to load var from memory to reg 
        once the var is needed.

    * There are two kinds of vars:
        1. global var
            Load with label.
        2. local var (include temp var, param var)
            Load with offset between $sp.
            offset is saved in local var offset table(lvo_tab).

    * When we need a var,
        1. Check reg_pool, whether has registed.
            If has registed, nothing need to be done.
        2. Ask for a reg.
        3. If asked reg is taken from another var,
            write back the var's value to its address.
            write back is similiar with the load code.
        4. Load var's value into the registed reg. 
            [call the reg `$T`] [call the var's name `label`]
            a. If is global var, just load with the label.
                * char
                    lb  $T, label
                * int
                    lw  $T, label
            b. If is local var, load with the offset between $sp
            [call the offset `offset`]
                * char
                    lb  $T, offset($sp)
                * int
                    lw  $T, offset($sp)
    * When transforming, Backend may need a temp register.
        It is allowed, but Backend can only have at most two register and can only used in one tuple's transforming.
        The register will not be registed for any variable.
        If any var need new reg, the temp register is allowed to be given without any noticing.


Program wrapper----
j   <GLOBAL_FUNC_LABEL>
...
<GLOBAL_FUNC_LABEL>:
jal  <MAIN_FUNC_LABEL>


DataCmd----

    * Three kinds of labels:
        1. jump labels: two kinds
            a. function label
            b. auto-generaterd label
        2. var labels: all global varaibles
        3. string labels: use string table to save map relations.
    * in .data segament, var labels & string labels need to be declared.

    [string labels]
        <name>: .asciiz "<string>"
            * label name is auto_generated, called <name>
            * the label's corresponding string is called <string>

    [var labels] [dim == 0]
        <name>: .word
            * label name is transformed from var's name, called <name>
            * Both char and int are using one word, only cutting tail when saving into memory.

    [var labels] [dim > 0]
        <name>: .space 4*<dim>
            * label name is the same as var labels with 0 dim.
            


InstCmd----

    Following is Tuple-MIPS 's mapping relation.
        * All assumes values are registers or intermediate values.
            global variable is an expection, we use its label format.
        * For char type, we just save/load one byte when saving/loading the char var.
            After it is loaded into memory, we operate as a int.
            For a char array, each element is aligned to one word in memory.
            All char element is save in one word in memory.
        * For each map, allow one temp register. Represented by $T
        * For a string, use its label.

    EMPTY
        nop

    LABEL<Not function>
        left:

    ASSIGN
        move res, left

    NEG
        neg res, left

    ADD, SUB, MUL, DIV
        add/sub/mul/div res, left, right

    WARRAY
        * res is global var
        sll $T, left, 2
        sw  right, res($T)

        * res is local var
        sll $T, left, 2
        add $T, $T, offset
        add $T, $T, $sp
        sw  right, 0($T)

    RARRAY
        * left is global var
        sll $T, right, 2
        lw  res, left($T)

        * left is local var
        sll $T, right, 2
        add $T, $T, offset
        add $T, $T, $sp
        lw  res, 0($T)

    FUNC
        <stack_size>: local vars & GPR saved area.
        left.name:
        add $sp, $sp, -<stack_size>
        sw  $ra, xxx($sp)
        sw  $s?, xxx($sp)
        ...
        sw  $s0, 0($sp)

    PARAM
        add $sp, $sp, -4
        sw  res, 0($sp)
        # add <param_count>

    CALL
        jal res
        add $sp, $sp, 4*<param_count>
        # reset <param_count>

    RET
        <stack_size>: local vars & GPR saved area.
        lw  $s0, 0($sp)
        ...
        lw  $s?, xxx($sp)
        lw  $ra, xxx($sp)
        add $sp, $sp, <stack_size>
        jr  $ra

    INPUT
        <sys_num-- 
            char: 12
            int: 5
            >
        li  $v0, <sys_num>
        syscall
        move res, $v0

    OUTPUT
        * if left is set,
            la  $a0, left
            li  $v0, 4
            syscall
        * if right is set,
            <sys_num-- 
                char: 11
                int: 1
                >
            li  $v0, <sys_num>
            syscall

    LESS, LESSOREQUAL, MORE, MOREOREQUAL, NOTEQUAL, EQUAL
        slt/sle/sgt/sge/sne/seq res, left, right

    BEZ
        beqz left, res

    BEQ
        beq left, right, res

    JMP
        j res