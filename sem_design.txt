根据op类型来进行Tuple的分类

EMPTY

LABEL
    left: string. label name.
    effect: Do nothing. Only for jump.


ASSIGN
    left: any type. value to assign.
    res: var. var to be assigned
    effect: res = left

NEG
    left: any type
    res: var.
    effect: res = -left

ADD, SUB, MUL, DIV
    left: any type.
    right: any type.
    res: var.
    effect: res = left X right

WARRAY
    left: any type. selector
    right: any type. value to assign
    res: var with dim > 0. the array
    effect: res[left] = right

RARRAY
    left: var with dim > 0. the array
    right: any type. selector
    res: var. var to be assign
    effect: res = left[right]

FUNC
    res: entry. func entry.
    effect: mark the function's start label.
        move stack pointer & save used GPR.

PARAM
    res: any type. param value to be passed. 
    effect: when next CALL tuple, this value wiil be a passed param.

CALL
    res: func. func to be called.
    effect: alloc called func's stack.
            push all cached params into stack.
            save the call tuple.

RET
    effect: free current function's stack
            jump back to the call tuple.

INPUT
    res: var
    effect: read a value from input,
            and save into res.

OUTPUT
    left[optional]: string.
    right[optional]: any type.
    effect: if left is set, output left's string.
            if right is set, output right's value.

LESS, LESSOREQUAL, MORE, MOREOREQUAL, NOEQUAL, EQUAL
    left: any type.
    right: any type.
    res: var.
    effect: res = left X right

BEZ
    left: any type.
    res: string. label name
    effect: jump to res if left is zero.

BEQ
    left: any type.
    right: any type.
    res: string. label name
    effect: jump to res if left == right

JMP
    res: string. label name
    effect: jump to res